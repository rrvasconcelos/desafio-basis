// <auto-generated />
using System;
using BookStore.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BookStore.Infrastructure.Database.Migrations
{
    [DbContext(typeof(BookStoreDbContext))]
    [Migration("20250302150644_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BookStore.Domain.Authors.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_authors");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_authors_name");

                    b.ToTable("authors", "public");
                });

            modelBuilder.Entity("BookStore.Domain.Catalog.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Edition")
                        .HasColumnType("integer")
                        .HasColumnName("edition");

                    b.Property<string>("PublicationYear")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("publication_year");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("publisher");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_books");

                    b.HasIndex("Title")
                        .IsUnique()
                        .HasDatabaseName("ix_books_title");

                    b.ToTable("books", "public");
                });

            modelBuilder.Entity("BookStore.Domain.Catalog.BookAuthor", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("integer")
                        .HasColumnName("book_id");

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer")
                        .HasColumnName("author_id");

                    b.HasKey("BookId", "AuthorId")
                        .HasName("pk_book_authors");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_book_authors_author_id");

                    b.ToTable("book_authors", "public");
                });

            modelBuilder.Entity("BookStore.Domain.Catalog.BookSubject", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("integer")
                        .HasColumnName("book_id");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer")
                        .HasColumnName("subject_id");

                    b.HasKey("BookId", "SubjectId")
                        .HasName("pk_book_subjects");

                    b.HasIndex("SubjectId")
                        .HasDatabaseName("ix_book_subjects_subject_id");

                    b.ToTable("book_subjects", "public");
                });

            modelBuilder.Entity("BookStore.Domain.Catalog.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_subjects");

                    b.HasIndex("Description")
                        .IsUnique()
                        .HasDatabaseName("ix_subjects_description");

                    b.ToTable("subjects", "public");
                });

            modelBuilder.Entity("BookStore.Domain.Publishing.BookPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer")
                        .HasColumnName("book_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("PurchaseType")
                        .HasColumnType("integer")
                        .HasColumnName("purchase_type");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_book_prices");

                    b.HasIndex("BookId")
                        .HasDatabaseName("ix_book_prices_book_id");

                    b.ToTable("book_prices", "public");
                });

            modelBuilder.Entity("BookStore.Domain.Catalog.BookAuthor", b =>
                {
                    b.HasOne("BookStore.Domain.Authors.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_authors_authors_author_id");

                    b.HasOne("BookStore.Domain.Catalog.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_authors_books_book_id");

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookStore.Domain.Catalog.BookSubject", b =>
                {
                    b.HasOne("BookStore.Domain.Catalog.Book", "Book")
                        .WithMany("BookSubjects")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_subjects_books_book_id");

                    b.HasOne("BookStore.Domain.Catalog.Subject", "Subject")
                        .WithMany("BookSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_subjects_subjects_subject_id");

                    b.Navigation("Book");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("BookStore.Domain.Publishing.BookPrice", b =>
                {
                    b.HasOne("BookStore.Domain.Catalog.Book", "Book")
                        .WithMany("BookPrices")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_prices_books_book_id");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookStore.Domain.Authors.Author", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("BookStore.Domain.Catalog.Book", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("BookPrices");

                    b.Navigation("BookSubjects");
                });

            modelBuilder.Entity("BookStore.Domain.Catalog.Subject", b =>
                {
                    b.Navigation("BookSubjects");
                });
#pragma warning restore 612, 618
        }
    }
}
